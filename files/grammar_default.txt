PROGRAM = FUNCTIONS MAINFUNC
        | DECL endLine GLDECL FUNCTIONS MAINFUNC

MAINFUNC = main paramBeg paramEnd TYPE BLOCK

GLDECL = DECL endLine GLDECL
       | epsilon

FUNCTIONS = funDecl id PARAMS RETURNTYPE BLOCK FUNCTIONS
          | epsilon

PARAMS = paramBeg LISTPARAMS paramEnd
LISTPARAMS = TYPE NAME
           | LISTPARAMS commaSep TYPE NAME
           | epsilon

TYPE = typeInt
     | typeFloat
     | typeBool
     | typeChar
     | typeString
     | typeEmpty
     | typeNull

RETURNTYPE = TYPE
           | TYPE arrayBeg arrayEnd

NAME = id
     | id arrayBeg EXPR arrayEnd
     | id arrayBeg arrayEnd

BLOCK = blockBeg CMDS blockEnd

CMDS = CMDS CMD
     | CMD

CMD = DECL endLine
    | id ASSG endLine
    | id arrayBeg EXPR arrayEnd ASSG endLine
    | id FUNCCALL endLine
    | PRINT endLine
    | READ endLine
    | IFELSE
    | WHILE
    | REPEAT
    | RETURN endLine

DECL = varDecl TYPE NAME
     | varDecl TYPE NAME ASSG

ASSG = opAssign VALUE
     | opAssign TYPE castSep VALUE

VALUE = ARRAY
      | EXPR

ARRAY = arrayValBeg ELEMENTS arrayValEnd
ELEMENTS = EXPR
         | ELEMENTS commaSep EXPR

FUNCCALL = paramBeg LISTPARAMSCALL paramEnd
LISTPARAMSCALL = PARAMITEM
               | LISTPARAMSCALL commaSep PARAMITEM

PARAMITEM = EXPR
          | epsilon

PRINT = cmdPrint paramBeg EXPR paramEnd
READ = cmdRead paramBeg NAME paramEnd

IFELSE = IF ELIF ELSE
IF = cmdIf paramBeg EXPR paramEnd BLOCK

ELIF = cmdElif paramBeg EXPR paramEnd BLOCK ELIF
     | epsilon

ELSE = cmdElse BLOCK
     | epsilon

WHILE = cmdWhile paramBeg EXPR paramEnd BLOCK
REPEAT = cmdRepeat id cmdIn paramBeg EXPR commaSep EXPR commaSep EXPR paramEnd BLOCK
       | cmdRepeat id cmdIn paramBeg EXPR commaSep EXPR paramEnd BLOCK

RETURN = cmdReturn EXPR

EXPR = EXPROR
EXPROR = EXPROR opOr EXPRAND
       | EXPRAND

EXPRAND = EXPRAND opAnd EXPREQUALS
        | EXPREQUALS

EXPREQUALS = EXPRREL opEquals EXPRREL
           | EXPRREL

EXPRREL = EXPRADD opRel EXPRADD
        | EXPRADD

EXPRADD = EXPRADD opAditiv EXPRAMULT
        | EXPRAMULT

EXPRAMULT = EXPRAMULT opMult EXPRUN
          | EXPRUN

EXPRUN = opUnaryNeg EXPRUN
       | EXPRPARAM

EXPRPARAM = paramBeg EXPR paramEnd
          | EXPRVALUES

EXPRVALUES = id
           | id CONCAT
           | constNumInt
           | constNumFloat
           | constBool
           | constChar
           | constChar CONCAT
           | constString
           | constString CONCAT
           | id arrayBeg EXPR arrayEnd ARRCONCAT
           | id FUNCCALL
           | id CONCAT

ARRCONCAT = CONCAT
          | epsilon

CONCAT = opConcat constString
       | opConcat constChar
       | opConcat id